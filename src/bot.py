from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, CallbackQueryHandler, filters
)
import aiohttp
import datetime

ASK_CITY = 1
WEATHER_API_KEY = 'c8c03c910db2cb5bf18fdb6cce5c5fe0'
EXCHANGE_API_KEY = "da8e4d0600a4a2e30e525897"

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    keyboard = [
        [InlineKeyboardButton("üå§ –ü–æ–≥–æ–¥–∞", callback_data='weather')],
        [InlineKeyboardButton("üí± –ö—É—Ä—Å –≤–∞–ª—é—Ç", callback_data='exchange')],
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# –ö–æ–º–∞–Ω–¥–∞ /weather
async def weather_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üåç –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É?")
    return ASK_CITY

# –≠–º–æ–¥–∂–∏ –ø–æ –∏–∫–æ–Ω–∫–µ
def weather_emoji(icon: str) -> str:
    mapping = {
        "01d": "‚òÄÔ∏è", "01n": "üåô", "02d": "üå§", "02n": "üå§",
        "03d": "‚òÅÔ∏è", "03n": "‚òÅÔ∏è", "04d": "‚òÅÔ∏è", "04n": "‚òÅÔ∏è",
        "09d": "üåß", "09n": "üåß", "10d": "üå¶", "10n": "üåß",
        "11d": "‚õà", "11n": "‚õà", "13d": "‚ùÑÔ∏è", "13n": "‚ùÑÔ∏è",
        "50d": "üå´", "50n": "üå´"
    }
    return mapping.get(icon, "üåà")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
async def fetch_weather(city: str) -> str:
    url = f"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                forecast_list = data['list']
                today = datetime.datetime.now().date()

                result = f"üìç *–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ {city.title()} –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n\n"
                periods = {}

                for item in forecast_list:
                    dt = datetime.datetime.fromtimestamp(item['dt'])
                    if dt.date() != today:
                        continue

                    hour = dt.hour
                    period = (
                        "üåô –ù–æ—á—å" if hour < 6 else
                        "üïñ –£—Ç—Ä–æ" if hour < 12 else
                        "üå§ –î–µ–Ω—å" if hour < 18 else
                        "üåÜ –í–µ—á–µ—Ä"
                    )

                    temp = item['main']['temp']
                    desc = item['weather'][0]['description'].capitalize()
                    emoji = weather_emoji(item['weather'][0]['icon'])

                    if period not in periods:
                        periods[period] = f"{period}: {emoji} *{desc}*, {temp:.0f}¬∞C"

                if not periods:
                    return "‚ö†Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."

                for part in ["üåô –ù–æ—á—å", "üïñ –£—Ç—Ä–æ", "üå§ –î–µ–Ω—å", "üåÜ –í–µ—á–µ—Ä"]:
                    if part in periods:
                        result += periods[part] + "\n"

                return result
            else:
                return "‚ö†Ô∏è –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞."

# –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π
async def fetch_weather_forecast(city: str) -> str:
    url = f"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                forecast_list = data['list']
                result = f"üìç *–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ {city.title()} –Ω–∞ 5 –¥–Ω–µ–π:*\n\n"
                daily_data = {}

                for item in forecast_list:
                    dt = datetime.datetime.fromtimestamp(item['dt'])
                    date_str = dt.strftime('%d.%m')
                    hour = dt.hour
                    period = (
                        "üåô –ù–æ—á—å" if hour < 6 else
                        "üïñ –£—Ç—Ä–æ" if hour < 12 else
                        "üå§ –î–µ–Ω—å" if hour < 18 else
                        "üåÜ –í–µ—á–µ—Ä"
                    )

                    temp = item['main']['temp']
                    desc = item['weather'][0]['description'].capitalize()
                    emoji = weather_emoji(item['weather'][0]['icon'])

                    line = f"{period}: {emoji} *{desc}*, {temp:.0f}¬∞C"
                    daily_data.setdefault(date_str, {})[period] = line

                for date, parts in list(daily_data.items())[:5]:
                    result += f"üìÜ *{date}*\n"
                    for part in ["üåô –ù–æ—á—å", "üïñ –£—Ç—Ä–æ", "üå§ –î–µ–Ω—å", "üåÜ –í–µ—á–µ—Ä"]:
                        if part in parts:
                            result += parts[part] + "\n"
                    result += "\n"

                return result
            else:
                return "‚ö†Ô∏è –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞."

# –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
async def handle_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    city = update.message.text
    context.user_data["city"] = city

    keyboard = [
        [InlineKeyboardButton("üå§ –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞", callback_data='current')],
        [InlineKeyboardButton("üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π", callback_data='forecast')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='menu')],
    ]
    await update.message.reply_text("–ß—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å?", reply_markup=InlineKeyboardMarkup(keyboard))
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "menu":
        await query.edit_message_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
        return

    if data == "weather":
        await query.edit_message_text("üåç –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É?")
        context.user_data["awaiting_city"] = True
        return

    if data == "exchange":
        result = await fetch_exchange()
        await query.edit_message_text(result, reply_markup=main_menu())
        return

    city = context.user_data.get("city")
    if not city:
        await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ —á–µ—Ä–µ–∑ /weather.")
        return

    result = await (fetch_weather(city) if data == "current" else fetch_weather_forecast(city))
    await query.edit_message_text(result, parse_mode="Markdown", reply_markup=main_menu())

# –ö—É—Ä—Å –≤–∞–ª—é—Ç
async def fetch_exchange():
    url = f"https://v6.exchangerate-api.com/v6/{EXCHANGE_API_KEY}/latest/USD"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                rates = data["conversion_rates"]
                return (
                    f"üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç (1 USD):\n"
                    f"üá∑üá∫ RUB: {rates['RUB']}\n"
                    f"üá™üá∫ EUR: {rates['EUR']}\n"
                    f"üá∞üáø KZT: {rates['KZT']}\n"
                    f"üá®üá≥ CNY: {rates['CNY']}"
                )
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç."

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–∫–µ–π, –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu())
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("awaiting_city"):
        context.user_data["awaiting_city"] = False
        return await handle_city(update, context)

# –ó–∞–ø—É—Å–∫
def main():
    application = Application.builder().token("7728372588:AAHuDpRe3YghR48fK5kqlwQH3AmsLQqDgtQ").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("weather", weather_command)],
        states={ASK_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_city)]},
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    application.run_polling()

if __name__ == '__main__':
    main()
